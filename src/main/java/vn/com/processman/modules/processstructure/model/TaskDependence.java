package vn.com.processman.modules.processstructure.model;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DAttr.Type;
import jda.modules.dcsl.syntax.DOpt;

/**
 * @overview
 * 	Represents task dependency
 * 
 * @author dmle
 * 
 * @todo
 * - this class is NOT being used!
 */
public class TaskDependence {
  // attributes
  @DAttr(name="id", type=Type.Integer, id=true, auto=true, mutable=false, optional=false)
  private int id;
  private static int idCounter = 0;
  
  @DAttr(name="dependant", type=Type.Domain, optional=false)
  private Task dependant;

  @DAttr(name="dependee", type=Type.Domain, optional=false)
  private Task dependee;

  // constructor: from data source
  public TaskDependence(Integer id, Task dependant, Task dependee) {
    this.id = nextID(id);
    this.dependant = dependant;
    this.dependee = dependee;
  }

  // constructor: from object form
  public TaskDependence(Task dependant, Task dependee) {
    this(null, dependant, dependee);
  }

  public Task getDependant() {
    return dependant;
  }

  public void setDependant(Task dependant) {
    this.dependant = dependant;
  }

  public Task getDependee() {
    return dependee;
  }

  public void setDependee(Task dependee) {
    this.dependee = dependee;
  }

  public int getId() {
    return id;
  }

  // util methods
  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();

      if (num > idCounter) {
        idCounter = num;
      }
      return currID;
    }
  }

  /**
   * @requires minVal != null /\ maxVal != null
   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
   *          specified for <tt>derivingValue</tt>, using
   *          <tt>minVal, maxVal</tt>
   */
  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(DAttr attrib,
      Tuple derivingValue, Object minVal, Object maxVal)
      throws ConstraintViolationException {
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)
          idCounter = maxIdVal;
      }
      // TODO add support for other attributes here
    }
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    TaskDependence other = (TaskDependence) obj;
    if (id != other.id)
      return false;
    return true;
  }

  @Override
  public String toString() {
    return "TaskDependence (" + id + ", " + dependant + ", " + dependee + ")";
  }
}
