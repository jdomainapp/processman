package vn.com.processman.modules.processsconstraint.model.function;

import java.util.Arrays;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.exceptions.NotPossibleException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DAttr.Type;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dodm.DODMBasic;
import vn.com.processman.modules.processsconstraint.model.BooleanExpression;

/**
 * @overview
 * 	Represents a function.
 * 
 * @author dmle
 */
@DClass(serialisable=false)
public abstract class Function {
  // attributes
  @DAttr(name="id", type=Type.Integer, id=true, auto=true, mutable=false, optional=false)
  private int id;
  private static int idCounter = 0;
  
  /**(applied to root functions only) the expression of which this is the root*/
  @DAttr(name="exp", type=Type.Domain)
  private BooleanExpression exp;
  
  /** function arguments */
  @DAttr(name="args", type=Type.Array)
  private Object[] args;
  
  /** the parent (caller) {@link Function} of this in a function tree of some expressions */
  @DAttr(name="caller", type=Type.Domain)
  private Function caller;

  /** the called {@link Function} of this (i.e. those whose caller is set to this) */
  //private Collection<Function> callees;
  
  public Function(Object...args) {
    this.id = nextID(null);
    this.args = args;
    
    // if args contain called Functions, initialise callees and set the caller of theirs to this
    Function callee;
    for (Object arg : args) {
      if (arg instanceof Function) {
        //if (callees == null) callees = new ArrayList();
        callee = (Function)arg;
        //callees.add(callee);
        callee.setCaller(this);
      }
    }
  }

  /**
   * @effects
   *  evaluate this and return the result as {@link Object}
   */
  public abstract Object eval() throws NotPossibleException;
  
  public Object[] getArgs() {
    return args;
  }

  /**
   * This is invoked only for root functions
   */
  public void setExp(BooleanExpression exp) {
    this.exp = exp;
  }

  /**
   * @effects 
   *  return the {@link BooleanExpression} whose function tree contains this
   */
  public BooleanExpression getExp() {
    if (caller != null) {
      // this is a child function, forward to parent to reach root
      return caller.getExp();
    } else {
      // root is reached...
      return exp;
    }
  }

  public Function getCaller() {
    return caller;
  }

  public void setCaller(Function caller) {
    this.caller = caller;
  }

  public DODMBasic getDodm() {
    return getExp().getDodm();
  }

  public int getId() {
    return id;
  }

  // util methods
  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();

      if (num > idCounter) {
        idCounter = num;
      }
      return currID;
    }
  }

  /**
   * @requires minVal != null /\ maxVal != null
   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
   *          specified for <tt>derivingValue</tt>, using
   *          <tt>minVal, maxVal</tt>
   */
  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(DAttr attrib,
      Tuple derivingValue, Object minVal, Object maxVal)
      throws ConstraintViolationException {
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)
          idCounter = maxIdVal;
      }
      // TODO add support for other attributes here
    }
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Function other = (Function) obj;
    if (id != other.id)
      return false;
    return true;
  }

  @Override
  public String toString() {
    return this.getClass().getSimpleName()+" (" + Arrays.toString(args) + ")";
  }
}
