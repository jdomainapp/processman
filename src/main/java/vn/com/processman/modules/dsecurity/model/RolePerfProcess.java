package vn.com.processman.modules.dsecurity.model;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.AttrRef;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DAttr.Type;
import jda.modules.dcsl.syntax.DOpt;
import vn.com.processman.modules.processstructure.model.Process;

/**
 * @overview
 *  Represents normalised association between {@link Role} and {@link Process}
 *  
 * @author dmle
 *
 * @version 3.3 
 */
public class RolePerfProcess {
  public static final String A_role = "role";
  public static final String A_process = "process";
  
  @DAttr(name="id", type=Type.Integer, id=true, auto=true, mutable=false, optional=false)
  private int id;
  private static int idCounter = 0;

  /**association {@link Role}*/
  @DAssoc(ascName = Role.Assoc_RoleAndRolePerfProcess, role = "rolePerfProcess", 
      ascType = AssocType.One2Many, endType = AssocEndType.Many, 
      associate = @Associate(type = Role.class, cardMin = 1, cardMax = 1),
      dependsOn=true)
  @DAttr(name=A_role,type=Type.Domain, optional=false)
  private Role role;
  
  /**association to {@link Process} */
  @DAssoc(ascName = Process.Assoc_ProcessAndRolePerfProcess, role = "rolePerfProcess", 
      ascType = AssocType.One2Many, endType = AssocEndType.Many, 
      associate = @Associate(type = Process.class, cardMin = 1, cardMax = 1),
      dependsOn=true)
  @DAttr(name=A_process,type=Type.Domain, optional=false)
  private Process process;

  // from data source
  @DOpt(type=DOpt.Type.DataSourceConstructor)
  public RolePerfProcess(Integer id, Role role, Process process) {
    this.id = nextID(id);
    this.role = role;
    this.process = process;
  }

  // from form
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public RolePerfProcess(Role role, Process process) {
    this(null, role, process);
  }
  
  @DOpt(type=DOpt.Type.Getter) @AttrRef(value="id")
  public int getId() {
    return id;
  }

  // util methods
  @DOpt(type=DOpt.Type.AutoAttributeValueGen) @AttrRef(value="id")
  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();

      if (num > idCounter) {
        idCounter = num;
      }
      return currID;
    }
  }

  /**
   * @requires minVal != null /\ maxVal != null
   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
   *          specified for <tt>derivingValue</tt>, using
   *          <tt>minVal, maxVal</tt>
   */
  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(DAttr attrib,
      Tuple derivingValue, Object minVal, Object maxVal)
      throws ConstraintViolationException {
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)
          idCounter = maxIdVal;
      }
      // TODO add support for other attributes here
    }
  }

  public Role getRole() {
    return role;
  }

  public void setRole(Role role) {
    this.role = role;
  }

  public Process getProcess() {
    return process;
  }

  public void setProcess(Process process) {
    this.process = process;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    RolePerfProcess other = (RolePerfProcess) obj;
    if (id != other.id)
      return false;
    return true;
  }

  @Override
  public String toString() {
    return "RolePerfProcess (" + id + ", " + role + ", " + process + ")";
  }
}
