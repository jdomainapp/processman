/**
 * @overview
 *
 * @author dmle
 */
package vn.com.processman.modules.teaching.model;

import vn.com.processman.modules.dsecurity.model.Teacher;
import vn.com.processman.modules.teaching.subjectbysem.model.SubjectBySemester;
import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;

/**
 * @overview
 *  Normalises the many-many association between {@link Teacher} and {@link SubjectBySemester}
 *  
 * @author dmle
 */
public class TeachingBySemester {
  
  public static final String A_subject = "subject";
  public static final String A_teacher = "teacher";
  
  @DAttr(name="id", type=Type.Integer, id=true, auto=true, mutable=false, optional=false)
  private int id;
  private static int idCounter = 0;

  /**association {@link Teacher#Assoc_TeacherAndTeachingBySemester}*/
  @DAssoc(ascName = Teacher.Assoc_TeacherAndTeachingBySemester, role = "teaching", 
      ascType = AssocType.One2Many, endType = AssocEndType.Many, 
      associate = @Associate(type = Teacher.class, cardMin = 1, cardMax = 1),
      dependsOn=true)
  @DAttr(name=A_teacher,type=Type.Domain, optional=false)
  private Teacher teacher;
  
  /**the {@link SubjectBySemester} object */
  @DAssoc(ascName = SubjectBySemester.Assoc_SubjectBySemesterAndTeaching, role = "teaching", 
      ascType = AssocType.One2Many, endType = AssocEndType.Many, 
      associate = @Associate(type = SubjectBySemester.class, cardMin = 1, cardMax = 1),
      dependsOn=true)
  @DAttr(name=A_subject,type=Type.Domain, optional=false)
  private SubjectBySemester subject;

  // from data source
  @DOpt(type=DOpt.Type.DataSourceConstructor)
  public TeachingBySemester(Integer id, Teacher teacher, SubjectBySemester subject) {
    this.id = nextID(id);
    this.teacher = teacher;
    this.subject = subject;
  }

  // from form
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public TeachingBySemester(Teacher teacher, SubjectBySemester subject) {
    this(null, teacher, subject);
  }

  public Teacher getTeacher() {
    return teacher;
  }

  public void setTeacher(Teacher teacher) {
    this.teacher = teacher;
  }

  public SubjectBySemester getSubject() {
    return subject;
  }

  public void setSubject(SubjectBySemester subject) {
    this.subject = subject;
  }

  @DOpt(type=DOpt.Type.Getter) @AttrRef(value="id")
  public int getId() {
    return id;
  }

  // util methods
  @DOpt(type=DOpt.Type.AutoAttributeValueGen) @AttrRef(value="id")
  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();

      if (num > idCounter) {
        idCounter = num;
      }
      return currID;
    }
  }

  /**
   * @requires minVal != null /\ maxVal != null
   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
   *          specified for <tt>derivingValue</tt>, using
   *          <tt>minVal, maxVal</tt>
   */
  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(DAttr attrib,
      Tuple derivingValue, Object minVal, Object maxVal)
      throws ConstraintViolationException {
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)
          idCounter = maxIdVal;
      }
      // TODO add support for other attributes here
    }
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    TeachingBySemester other = (TeachingBySemester) obj;
    if (id != other.id)
      return false;
    return true;
  }

  @Override
  public String toString() {
    return "TeachingBySemester (" + id + ", " + teacher.getName() + ", " + subject.getCode() + ")";
  }
}
